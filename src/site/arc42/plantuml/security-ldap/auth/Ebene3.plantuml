@startuml Ebene3.png
hide empty members

component [spring-web] {
    abstract class OncePerRequestFilter
}

component [spring-security-ldap] {
    class "LdapUserDetailsService" as springLdapUserDetailsService
}

package auth {

    class LDAPUserDetailsService {
        authenticate(userId : String, password : String ) : Authentication
        refresh(userId : String, token : String ) : Authentication
    }
    springLdapUserDetailsService <|-- LDAPUserDetailsService
    LDAPUserDetailsService --> "1" userTenantProvider : userTenant

    class JWTRequestFilter {
        verifyAndAuthenticate(request : HttpServletRequest, bearer : String) : void
    }
    OncePerRequestFilter <|-- JWTRequestFilter

    class JWTService {
        +{static} GRANTED_AUTHORITIES = "projects" : grantedAuthorities
        -secret : String
        -jwtExpiresSeconds : Long
        -jwtRefreshExpiresSeconds : Long

        +generateToken(userId : String, grantedAuthorities :  Collection<String>) : String
        +generateRefreshToken(userId : String, grantedAuthorities :  Collection<String>) : String
        +getClaimsOf(token : String) : Claims
        +isTokenExpired(claims : Claims) : boolean
        +getUserNameOf(claims : Claims) : String
        +extractGrantedAuthorities(claims : Claims) : Collection<String>
        -getSignInKey() : SecretKey

    }

    class AuthenticationController {
        -contextPath : String
        +postAuthenticate(authenticationRequest : AuthenticationRequest) : ResponseEntity<AuthenticationResource>
        +postRefreshAccessToken(authenticationRefreshRequest : AuthenticationRefreshRequest) : ResponseEntity<AuthenticationResource>
    }
    AuthenticationController --> "1" LDAPUserDetailsService : service

    interface "Function<UserDetails, String>" as userGroupTenantProvider {
    }

    class UserGroupTenantProvider {
    }
    userGroupTenantProvider <|-- UserGroupTenantProvider


    class LDAPConfiguration {
    }


}
@enduml
